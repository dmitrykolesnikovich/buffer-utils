@file:Suppress("NOTHING_TO_INLINE")
@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)
package kool

import kool.ubuffers.asUByteBuffer
import kool.ubuffers.UByteBuffer
import java.nio.LongBuffer
import kool.ubuffers.UShortBuffer
import java.nio.Buffer
import org.lwjgl.system.MemoryStack
import kool.ubuffers.asULongBuffer
import kool.ubuffers.ULongBuffer
import java.nio.IntBuffer
import org.lwjgl.system.Pointer
import java.nio.ByteBuffer
import org.lwjgl.PointerBuffer
import java.nio.ShortBuffer
import org.lwjgl.system.MemoryUtil
import kool.ubuffers.asUIntBuffer
import kool.ubuffers.asUShortBuffer
import java.nio.DoubleBuffer
import java.nio.FloatBuffer
import kool.ubuffers.UIntBuffer
import kool.adr

inline infix operator fun Ptr<Byte>.get(index: Int): Byte = get(index.toULong())
inline infix operator fun Ptr<Byte>.get(index: UInt): Byte = get(index.toULong())
inline infix operator fun Ptr<Byte>.get(index: Long): Byte = get(index.toULong())
inline fun Ptr<Byte>.get(): Byte = get(0uL)
inline infix operator fun Ptr<Byte>.get(index: ULong): Byte = unsafe.getByte(adr + index)
inline infix operator fun Ptr<Byte>.invoke(index: Int): Byte = invoke(index.toULong())
inline infix operator fun Ptr<Byte>.invoke(index: UInt): Byte = invoke(index.toULong())
inline infix operator fun Ptr<Byte>.invoke(index: Long): Byte = invoke(index.toULong())
inline operator fun Ptr<Byte>.invoke(): Byte = get(0uL)
inline infix operator fun Ptr<Byte>.invoke(index: ULong): Byte = get(index)
@JvmName("plusByteInt")
inline infix operator fun Ptr<Byte>.plus(offset: Int): Ptr<Byte> = plus(offset.toULong())
@JvmName("plusByteUInt")
inline infix operator fun Ptr<Byte>.plus(offset: UInt): Ptr<Byte> = plus(offset.toULong())
@JvmName("plusByteLong")
inline infix operator fun Ptr<Byte>.plus(offset: Long): Ptr<Byte> = plus(offset.toULong())
@JvmName("plusByteULong")
inline infix operator fun Ptr<Byte>.plus(offset: ULong): Ptr<Byte> = Ptr(address + offset * Byte.BYTES.toULong())
@JvmName("minusByteInt")
inline infix operator fun Ptr<Byte>.minus(offset: Int): Ptr<Byte> = minus(offset.toULong())
@JvmName("minusByteUInt")
inline infix operator fun Ptr<Byte>.minus(offset: UInt): Ptr<Byte> = minus(offset.toULong())
@JvmName("minusByteLong")
inline infix operator fun Ptr<Byte>.minus(offset: Long): Ptr<Byte> = minus(offset.toULong())
@JvmName("minusByteULong")
inline infix operator fun Ptr<Byte>.minus(offset: ULong): Ptr<Byte> = Ptr(address - offset * Byte.BYTES.toUInt())
@JvmName("incByte")
inline operator fun Ptr<Byte>.inc(): Ptr<Byte> = plus(1)
@JvmName("decByte")
inline operator fun Ptr<Byte>.dec(): Ptr<Byte> = minus(1)
inline operator fun Ptr<Byte>.set(index: Int, byte: Byte) = set(index.toULong(), byte)
inline operator fun Ptr<Byte>.set(index: UInt, byte: Byte) = set(index.toULong(), byte)
inline operator fun Ptr<Byte>.set(index: Long, byte: Byte) = set(index.toULong(), byte)
inline operator fun Ptr<Byte>.set(index: ULong, byte: Byte) = unsafe.set(adr + index, byte)
inline fun PtrByte(size: Int = 1): Ptr<Byte> = MemoryUtil.nmemCalloc(size.toLong(), Byte.BYTES.toLong()).toPtr<Byte>()
inline fun PtrByte(size: Int = 1, init: (Int) -> Byte): Ptr<Byte> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong()).toPtr<Byte>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrByte(size: Int = 1): Ptr<Byte> = Ptr<Byte>(ncalloc(Byte.BYTES, size, Byte.BYTES))
inline fun MemoryStack.PtrByte(size: Int = 1, init: (Int) -> Byte): Ptr<Byte> {
    val ptr = nmalloc(Byte.BYTES, size).toPtr<Byte>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline infix operator fun Ptr<Short>.get(index: Int): Short = get(index.toULong())
inline infix operator fun Ptr<Short>.get(index: UInt): Short = get(index.toULong())
inline infix operator fun Ptr<Short>.get(index: Long): Short = get(index.toULong())
inline fun Ptr<Short>.get(): Short = get(0uL)
inline infix operator fun Ptr<Short>.get(index: ULong): Short = unsafe.getShort(adr + index * Short.BYTES.toULong())
inline infix operator fun Ptr<Short>.invoke(index: Int): Short = invoke(index.toULong())
inline infix operator fun Ptr<Short>.invoke(index: UInt): Short = invoke(index.toULong())
inline infix operator fun Ptr<Short>.invoke(index: Long): Short = invoke(index.toULong())
inline operator fun Ptr<Short>.invoke(): Short = get(0uL)
inline infix operator fun Ptr<Short>.invoke(index: ULong): Short = get(index)
@JvmName("plusShortInt")
inline infix operator fun Ptr<Short>.plus(offset: Int): Ptr<Short> = plus(offset.toULong())
@JvmName("plusShortUInt")
inline infix operator fun Ptr<Short>.plus(offset: UInt): Ptr<Short> = plus(offset.toULong())
@JvmName("plusShortLong")
inline infix operator fun Ptr<Short>.plus(offset: Long): Ptr<Short> = plus(offset.toULong())
@JvmName("plusShortULong")
inline infix operator fun Ptr<Short>.plus(offset: ULong): Ptr<Short> = Ptr(address + offset * Short.BYTES.toULong())
@JvmName("minusShortInt")
inline infix operator fun Ptr<Short>.minus(offset: Int): Ptr<Short> = minus(offset.toULong())
@JvmName("minusShortUInt")
inline infix operator fun Ptr<Short>.minus(offset: UInt): Ptr<Short> = minus(offset.toULong())
@JvmName("minusShortLong")
inline infix operator fun Ptr<Short>.minus(offset: Long): Ptr<Short> = minus(offset.toULong())
@JvmName("minusShortULong")
inline infix operator fun Ptr<Short>.minus(offset: ULong): Ptr<Short> = Ptr(address - offset * Short.BYTES.toUInt())
@JvmName("incShort")
inline operator fun Ptr<Short>.inc(): Ptr<Short> = plus(1)
@JvmName("decShort")
inline operator fun Ptr<Short>.dec(): Ptr<Short> = minus(1)
inline operator fun Ptr<Short>.set(index: Int, short: Short) = set(index.toULong(), short)
inline operator fun Ptr<Short>.set(index: UInt, short: Short) = set(index.toULong(), short)
inline operator fun Ptr<Short>.set(index: Long, short: Short) = set(index.toULong(), short)
inline operator fun Ptr<Short>.set(index: ULong, short: Short) = unsafe.set(adr + index * Short.BYTES.toULong(), short)
inline fun PtrShort(size: Int = 1): Ptr<Short> = MemoryUtil.nmemCalloc(size.toLong(), Short.BYTES.toLong()).toPtr<Short>()
inline fun PtrShort(size: Int = 1, init: (Int) -> Short): Ptr<Short> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * Short.BYTES.toLong()).toPtr<Short>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrShort(size: Int = 1): Ptr<Short> = Ptr<Short>(ncalloc(Short.BYTES, size, Short.BYTES))
inline fun MemoryStack.PtrShort(size: Int = 1, init: (Int) -> Short): Ptr<Short> {
    val ptr = nmalloc(Short.BYTES, size * Short.BYTES).toPtr<Short>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline infix operator fun Ptr<Int>.get(index: Int): Int = get(index.toULong())
inline infix operator fun Ptr<Int>.get(index: UInt): Int = get(index.toULong())
inline infix operator fun Ptr<Int>.get(index: Long): Int = get(index.toULong())
inline fun Ptr<Int>.get(): Int = get(0uL)
inline infix operator fun Ptr<Int>.get(index: ULong): Int = unsafe.getInt(adr + index * Int.BYTES.toULong())
inline infix operator fun Ptr<Int>.invoke(index: Int): Int = invoke(index.toULong())
inline infix operator fun Ptr<Int>.invoke(index: UInt): Int = invoke(index.toULong())
inline infix operator fun Ptr<Int>.invoke(index: Long): Int = invoke(index.toULong())
inline operator fun Ptr<Int>.invoke(): Int = get(0uL)
inline infix operator fun Ptr<Int>.invoke(index: ULong): Int = get(index)
@JvmName("plusIntInt")
inline infix operator fun Ptr<Int>.plus(offset: Int): Ptr<Int> = plus(offset.toULong())
@JvmName("plusIntUInt")
inline infix operator fun Ptr<Int>.plus(offset: UInt): Ptr<Int> = plus(offset.toULong())
@JvmName("plusIntLong")
inline infix operator fun Ptr<Int>.plus(offset: Long): Ptr<Int> = plus(offset.toULong())
@JvmName("plusIntULong")
inline infix operator fun Ptr<Int>.plus(offset: ULong): Ptr<Int> = Ptr(address + offset * Int.BYTES.toULong())
@JvmName("minusIntInt")
inline infix operator fun Ptr<Int>.minus(offset: Int): Ptr<Int> = minus(offset.toULong())
@JvmName("minusIntUInt")
inline infix operator fun Ptr<Int>.minus(offset: UInt): Ptr<Int> = minus(offset.toULong())
@JvmName("minusIntLong")
inline infix operator fun Ptr<Int>.minus(offset: Long): Ptr<Int> = minus(offset.toULong())
@JvmName("minusIntULong")
inline infix operator fun Ptr<Int>.minus(offset: ULong): Ptr<Int> = Ptr(address - offset * Int.BYTES.toUInt())
@JvmName("incInt")
inline operator fun Ptr<Int>.inc(): Ptr<Int> = plus(1)
@JvmName("decInt")
inline operator fun Ptr<Int>.dec(): Ptr<Int> = minus(1)
inline operator fun Ptr<Int>.set(index: Int, int: Int) = set(index.toULong(), int)
inline operator fun Ptr<Int>.set(index: UInt, int: Int) = set(index.toULong(), int)
inline operator fun Ptr<Int>.set(index: Long, int: Int) = set(index.toULong(), int)
inline operator fun Ptr<Int>.set(index: ULong, int: Int) = unsafe.set(adr + index * Int.BYTES.toULong(), int)
inline fun PtrInt(size: Int = 1): Ptr<Int> = MemoryUtil.nmemCalloc(size.toLong(), Int.BYTES.toLong()).toPtr<Int>()
inline fun PtrInt(size: Int = 1, init: (Int) -> Int): Ptr<Int> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * Int.BYTES.toLong()).toPtr<Int>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrInt(size: Int = 1): Ptr<Int> = Ptr<Int>(ncalloc(Int.BYTES, size, Int.BYTES))
inline fun MemoryStack.PtrInt(size: Int = 1, init: (Int) -> Int): Ptr<Int> {
    val ptr = nmalloc(Int.BYTES, size * Int.BYTES).toPtr<Int>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline infix operator fun Ptr<Long>.get(index: Int): Long = get(index.toULong())
inline infix operator fun Ptr<Long>.get(index: UInt): Long = get(index.toULong())
inline infix operator fun Ptr<Long>.get(index: Long): Long = get(index.toULong())
inline fun Ptr<Long>.get(): Long = get(0uL)
inline infix operator fun Ptr<Long>.get(index: ULong): Long = unsafe.getLong(adr + index * Long.BYTES.toULong())
inline infix operator fun Ptr<Long>.invoke(index: Int): Long = invoke(index.toULong())
inline infix operator fun Ptr<Long>.invoke(index: UInt): Long = invoke(index.toULong())
inline infix operator fun Ptr<Long>.invoke(index: Long): Long = invoke(index.toULong())
inline operator fun Ptr<Long>.invoke(): Long = get(0uL)
inline infix operator fun Ptr<Long>.invoke(index: ULong): Long = get(index)
@JvmName("plusLongInt")
inline infix operator fun Ptr<Long>.plus(offset: Int): Ptr<Long> = plus(offset.toULong())
@JvmName("plusLongUInt")
inline infix operator fun Ptr<Long>.plus(offset: UInt): Ptr<Long> = plus(offset.toULong())
@JvmName("plusLongLong")
inline infix operator fun Ptr<Long>.plus(offset: Long): Ptr<Long> = plus(offset.toULong())
@JvmName("plusLongULong")
inline infix operator fun Ptr<Long>.plus(offset: ULong): Ptr<Long> = Ptr(address + offset * Long.BYTES.toULong())
@JvmName("minusLongInt")
inline infix operator fun Ptr<Long>.minus(offset: Int): Ptr<Long> = minus(offset.toULong())
@JvmName("minusLongUInt")
inline infix operator fun Ptr<Long>.minus(offset: UInt): Ptr<Long> = minus(offset.toULong())
@JvmName("minusLongLong")
inline infix operator fun Ptr<Long>.minus(offset: Long): Ptr<Long> = minus(offset.toULong())
@JvmName("minusLongULong")
inline infix operator fun Ptr<Long>.minus(offset: ULong): Ptr<Long> = Ptr(address - offset * Long.BYTES.toUInt())
@JvmName("incLong")
inline operator fun Ptr<Long>.inc(): Ptr<Long> = plus(1)
@JvmName("decLong")
inline operator fun Ptr<Long>.dec(): Ptr<Long> = minus(1)
inline operator fun Ptr<Long>.set(index: Int, long: Long) = set(index.toULong(), long)
inline operator fun Ptr<Long>.set(index: UInt, long: Long) = set(index.toULong(), long)
inline operator fun Ptr<Long>.set(index: Long, long: Long) = set(index.toULong(), long)
inline operator fun Ptr<Long>.set(index: ULong, long: Long) = unsafe.set(adr + index * Long.BYTES.toULong(), long)
inline fun PtrLong(size: Int = 1): Ptr<Long> = MemoryUtil.nmemCalloc(size.toLong(), Long.BYTES.toLong()).toPtr<Long>()
inline fun PtrLong(size: Int = 1, init: (Int) -> Long): Ptr<Long> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * Long.BYTES.toLong()).toPtr<Long>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrLong(size: Int = 1): Ptr<Long> = Ptr<Long>(ncalloc(Long.BYTES, size, Long.BYTES))
inline fun MemoryStack.PtrLong(size: Int = 1, init: (Int) -> Long): Ptr<Long> {
    val ptr = nmalloc(Long.BYTES, size * Long.BYTES).toPtr<Long>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
@JvmName("getInt")
inline operator infix fun Ptr<UByte>.get(index: Int): UByte = get(index.toULong())
@JvmName("getUInt")
inline infix operator fun Ptr<UByte>.get(index: UInt): UByte = get(index.toULong())
@JvmName("getLong")
inline infix operator fun Ptr<UByte>.get(index: Long): UByte = get(index.toULong())
@JvmName("getULong")
inline fun Ptr<UByte>.get(): UByte = get(0uL)
@JvmName("getULong")
inline infix operator fun Ptr<UByte>.get(index: ULong): UByte = unsafe.getByte(adr + index).toUByte()
@JvmName("invokeInt")
inline infix operator fun Ptr<UByte>.invoke(index: Int): UByte = invoke(index.toULong())
@JvmName("invokeUInt")
inline infix operator fun Ptr<UByte>.invoke(index: UInt): UByte = invoke(index.toULong())
@JvmName("invokeLong")
inline infix operator fun Ptr<UByte>.invoke(index: Long): UByte = invoke(index.toULong())
@JvmName("invokeULong")
inline operator fun Ptr<UByte>.invoke(): UByte = get(0uL)
@JvmName("invokeULong")
inline infix operator fun Ptr<UByte>.invoke(index: ULong): UByte = get(index)
@JvmName("plusUByteInt")
inline infix operator fun Ptr<UByte>.plus(offset: Int): Ptr<UByte> = plus(offset.toULong())
@JvmName("plusUByteUInt")
inline infix operator fun Ptr<UByte>.plus(offset: UInt): Ptr<UByte> = plus(offset.toULong())
@JvmName("plusUByteLong")
inline infix operator fun Ptr<UByte>.plus(offset: Long): Ptr<UByte> = plus(offset.toULong())
@JvmName("plusUByteULong")
inline infix operator fun Ptr<UByte>.plus(offset: ULong): Ptr<UByte> = Ptr(address + offset * UByte.BYTES.toULong())
@JvmName("minusUByteInt")
inline infix operator fun Ptr<UByte>.minus(offset: Int): Ptr<UByte> = minus(offset.toULong())
@JvmName("minusUByteUInt")
inline infix operator fun Ptr<UByte>.minus(offset: UInt): Ptr<UByte> = minus(offset.toULong())
@JvmName("minusUByteLong")
inline infix operator fun Ptr<UByte>.minus(offset: Long): Ptr<UByte> = minus(offset.toULong())
@JvmName("minusUByteULong")
inline infix operator fun Ptr<UByte>.minus(offset: ULong): Ptr<UByte> = Ptr(address - offset * UByte.BYTES.toULong())
@JvmName("incUByte")
inline operator fun Ptr<UByte>.inc(): Ptr<UByte> = plus(1)
@JvmName("decUByte")
inline operator fun Ptr<UByte>.dec(): Ptr<UByte> = minus(1)
inline operator fun Ptr<UByte>.set(index: Int, uByte: UByte) = set(index.toULong(), uByte)
inline operator fun Ptr<UByte>.set(index: UInt, uByte: UByte) = set(index.toULong(), uByte)
inline operator fun Ptr<UByte>.set(index: Long, uByte: UByte) = set(index.toULong(), uByte)
inline operator fun Ptr<UByte>.set(index: ULong, uByte: UByte) = unsafe.set(adr + index, uByte.toByte())
inline fun PtrUByte(size: Int = 1): Ptr<UByte> = MemoryUtil.nmemCalloc(size.toLong(), UByte.BYTES.toLong()).toPtr<UByte>()
inline fun PtrUByte(size: Int = 1, init: (Int) -> UByte): Ptr<UByte> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong()).toPtr<UByte>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrUByte(size: Int = 1): Ptr<UByte> = Ptr<UByte>(ncalloc(UByte.BYTES, size, UByte.BYTES))
inline fun MemoryStack.PtrUByte(size: Int = 1, init: (Int) -> UByte): Ptr<UByte> {
    val ptr = nmalloc(UByte.BYTES, size).toPtr<UByte>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
@JvmName("getInt")
inline operator infix fun Ptr<UShort>.get(index: Int): UShort = get(index.toULong())
@JvmName("getUInt")
inline infix operator fun Ptr<UShort>.get(index: UInt): UShort = get(index.toULong())
@JvmName("getLong")
inline infix operator fun Ptr<UShort>.get(index: Long): UShort = get(index.toULong())
@JvmName("getULong")
inline fun Ptr<UShort>.get(): UShort = get(0uL)
@JvmName("getULong")
inline infix operator fun Ptr<UShort>.get(index: ULong): UShort = unsafe.getShort(adr + index * UShort.BYTES.toULong()).toUShort()
@JvmName("invokeInt")
inline infix operator fun Ptr<UShort>.invoke(index: Int): UShort = invoke(index.toULong())
@JvmName("invokeUInt")
inline infix operator fun Ptr<UShort>.invoke(index: UInt): UShort = invoke(index.toULong())
@JvmName("invokeLong")
inline infix operator fun Ptr<UShort>.invoke(index: Long): UShort = invoke(index.toULong())
@JvmName("invokeULong")
inline operator fun Ptr<UShort>.invoke(): UShort = get(0uL)
@JvmName("invokeULong")
inline infix operator fun Ptr<UShort>.invoke(index: ULong): UShort = get(index)
@JvmName("plusUShortInt")
inline infix operator fun Ptr<UShort>.plus(offset: Int): Ptr<UShort> = plus(offset.toULong())
@JvmName("plusUShortUInt")
inline infix operator fun Ptr<UShort>.plus(offset: UInt): Ptr<UShort> = plus(offset.toULong())
@JvmName("plusUShortLong")
inline infix operator fun Ptr<UShort>.plus(offset: Long): Ptr<UShort> = plus(offset.toULong())
@JvmName("plusUShortULong")
inline infix operator fun Ptr<UShort>.plus(offset: ULong): Ptr<UShort> = Ptr(address + offset * UShort.BYTES.toULong())
@JvmName("minusUShortInt")
inline infix operator fun Ptr<UShort>.minus(offset: Int): Ptr<UShort> = minus(offset.toULong())
@JvmName("minusUShortUInt")
inline infix operator fun Ptr<UShort>.minus(offset: UInt): Ptr<UShort> = minus(offset.toULong())
@JvmName("minusUShortLong")
inline infix operator fun Ptr<UShort>.minus(offset: Long): Ptr<UShort> = minus(offset.toULong())
@JvmName("minusUShortULong")
inline infix operator fun Ptr<UShort>.minus(offset: ULong): Ptr<UShort> = Ptr(address - offset * UShort.BYTES.toULong())
@JvmName("incUShort")
inline operator fun Ptr<UShort>.inc(): Ptr<UShort> = plus(1)
@JvmName("decUShort")
inline operator fun Ptr<UShort>.dec(): Ptr<UShort> = minus(1)
inline operator fun Ptr<UShort>.set(index: Int, uShort: UShort) = set(index.toULong(), uShort)
inline operator fun Ptr<UShort>.set(index: UInt, uShort: UShort) = set(index.toULong(), uShort)
inline operator fun Ptr<UShort>.set(index: Long, uShort: UShort) = set(index.toULong(), uShort)
inline operator fun Ptr<UShort>.set(index: ULong, uShort: UShort) = unsafe.set(adr + index * UShort.BYTES.toULong(), uShort.toShort())
inline fun PtrUShort(size: Int = 1): Ptr<UShort> = MemoryUtil.nmemCalloc(size.toLong(), UShort.BYTES.toLong()).toPtr<UShort>()
inline fun PtrUShort(size: Int = 1, init: (Int) -> UShort): Ptr<UShort> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * UShort.BYTES.toLong()).toPtr<UShort>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrUShort(size: Int = 1): Ptr<UShort> = Ptr<UShort>(ncalloc(UShort.BYTES, size, UShort.BYTES))
inline fun MemoryStack.PtrUShort(size: Int = 1, init: (Int) -> UShort): Ptr<UShort> {
    val ptr = nmalloc(UShort.BYTES, size * UShort.BYTES).toPtr<UShort>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
@JvmName("getInt")
inline operator infix fun Ptr<UInt>.get(index: Int): UInt = get(index.toULong())
@JvmName("getUInt")
inline infix operator fun Ptr<UInt>.get(index: UInt): UInt = get(index.toULong())
@JvmName("getLong")
inline infix operator fun Ptr<UInt>.get(index: Long): UInt = get(index.toULong())
@JvmName("getULong")
inline fun Ptr<UInt>.get(): UInt = get(0uL)
@JvmName("getULong")
inline infix operator fun Ptr<UInt>.get(index: ULong): UInt = unsafe.getInt(adr + index * UInt.BYTES.toULong()).toUInt()
@JvmName("invokeInt")
inline infix operator fun Ptr<UInt>.invoke(index: Int): UInt = invoke(index.toULong())
@JvmName("invokeUInt")
inline infix operator fun Ptr<UInt>.invoke(index: UInt): UInt = invoke(index.toULong())
@JvmName("invokeLong")
inline infix operator fun Ptr<UInt>.invoke(index: Long): UInt = invoke(index.toULong())
@JvmName("invokeULong")
inline operator fun Ptr<UInt>.invoke(): UInt = get(0uL)
@JvmName("invokeULong")
inline infix operator fun Ptr<UInt>.invoke(index: ULong): UInt = get(index)
@JvmName("plusUIntInt")
inline infix operator fun Ptr<UInt>.plus(offset: Int): Ptr<UInt> = plus(offset.toULong())
@JvmName("plusUIntUInt")
inline infix operator fun Ptr<UInt>.plus(offset: UInt): Ptr<UInt> = plus(offset.toULong())
@JvmName("plusUIntLong")
inline infix operator fun Ptr<UInt>.plus(offset: Long): Ptr<UInt> = plus(offset.toULong())
@JvmName("plusUIntULong")
inline infix operator fun Ptr<UInt>.plus(offset: ULong): Ptr<UInt> = Ptr(address + offset * UInt.BYTES.toULong())
@JvmName("minusUIntInt")
inline infix operator fun Ptr<UInt>.minus(offset: Int): Ptr<UInt> = minus(offset.toULong())
@JvmName("minusUIntUInt")
inline infix operator fun Ptr<UInt>.minus(offset: UInt): Ptr<UInt> = minus(offset.toULong())
@JvmName("minusUIntLong")
inline infix operator fun Ptr<UInt>.minus(offset: Long): Ptr<UInt> = minus(offset.toULong())
@JvmName("minusUIntULong")
inline infix operator fun Ptr<UInt>.minus(offset: ULong): Ptr<UInt> = Ptr(address - offset * UInt.BYTES.toULong())
@JvmName("incUInt")
inline operator fun Ptr<UInt>.inc(): Ptr<UInt> = plus(1)
@JvmName("decUInt")
inline operator fun Ptr<UInt>.dec(): Ptr<UInt> = minus(1)
inline operator fun Ptr<UInt>.set(index: Int, uInt: UInt) = set(index.toULong(), uInt)
inline operator fun Ptr<UInt>.set(index: UInt, uInt: UInt) = set(index.toULong(), uInt)
inline operator fun Ptr<UInt>.set(index: Long, uInt: UInt) = set(index.toULong(), uInt)
inline operator fun Ptr<UInt>.set(index: ULong, uInt: UInt) = unsafe.set(adr + index * UInt.BYTES.toULong(), uInt.toInt())
inline fun PtrUInt(size: Int = 1): Ptr<UInt> = MemoryUtil.nmemCalloc(size.toLong(), UInt.BYTES.toLong()).toPtr<UInt>()
inline fun PtrUInt(size: Int = 1, init: (Int) -> UInt): Ptr<UInt> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * UInt.BYTES.toLong()).toPtr<UInt>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrUInt(size: Int = 1): Ptr<UInt> = Ptr<UInt>(ncalloc(UInt.BYTES, size, UInt.BYTES))
inline fun MemoryStack.PtrUInt(size: Int = 1, init: (Int) -> UInt): Ptr<UInt> {
    val ptr = nmalloc(UInt.BYTES, size * UInt.BYTES).toPtr<UInt>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
@JvmName("getInt")
inline operator infix fun Ptr<ULong>.get(index: Int): ULong = get(index.toULong())
@JvmName("getUInt")
inline infix operator fun Ptr<ULong>.get(index: UInt): ULong = get(index.toULong())
@JvmName("getLong")
inline infix operator fun Ptr<ULong>.get(index: Long): ULong = get(index.toULong())
@JvmName("getULong")
inline fun Ptr<ULong>.get(): ULong = get(0uL)
@JvmName("getULong")
inline infix operator fun Ptr<ULong>.get(index: ULong): ULong = unsafe.getLong(adr + index * ULong.BYTES.toULong()).toULong()
@JvmName("invokeInt")
inline infix operator fun Ptr<ULong>.invoke(index: Int): ULong = invoke(index.toULong())
@JvmName("invokeUInt")
inline infix operator fun Ptr<ULong>.invoke(index: UInt): ULong = invoke(index.toULong())
@JvmName("invokeLong")
inline infix operator fun Ptr<ULong>.invoke(index: Long): ULong = invoke(index.toULong())
@JvmName("invokeULong")
inline operator fun Ptr<ULong>.invoke(): ULong = get(0uL)
@JvmName("invokeULong")
inline infix operator fun Ptr<ULong>.invoke(index: ULong): ULong = get(index)
@JvmName("plusULongInt")
inline infix operator fun Ptr<ULong>.plus(offset: Int): Ptr<ULong> = plus(offset.toULong())
@JvmName("plusULongUInt")
inline infix operator fun Ptr<ULong>.plus(offset: UInt): Ptr<ULong> = plus(offset.toULong())
@JvmName("plusULongLong")
inline infix operator fun Ptr<ULong>.plus(offset: Long): Ptr<ULong> = plus(offset.toULong())
@JvmName("plusULongULong")
inline infix operator fun Ptr<ULong>.plus(offset: ULong): Ptr<ULong> = Ptr(address + offset * ULong.BYTES.toULong())
@JvmName("minusULongInt")
inline infix operator fun Ptr<ULong>.minus(offset: Int): Ptr<ULong> = minus(offset.toULong())
@JvmName("minusULongUInt")
inline infix operator fun Ptr<ULong>.minus(offset: UInt): Ptr<ULong> = minus(offset.toULong())
@JvmName("minusULongLong")
inline infix operator fun Ptr<ULong>.minus(offset: Long): Ptr<ULong> = minus(offset.toULong())
@JvmName("minusULongULong")
inline infix operator fun Ptr<ULong>.minus(offset: ULong): Ptr<ULong> = Ptr(address - offset * ULong.BYTES.toULong())
@JvmName("incULong")
inline operator fun Ptr<ULong>.inc(): Ptr<ULong> = plus(1)
@JvmName("decULong")
inline operator fun Ptr<ULong>.dec(): Ptr<ULong> = minus(1)
inline operator fun Ptr<ULong>.set(index: Int, uLong: ULong) = set(index.toULong(), uLong)
inline operator fun Ptr<ULong>.set(index: UInt, uLong: ULong) = set(index.toULong(), uLong)
inline operator fun Ptr<ULong>.set(index: Long, uLong: ULong) = set(index.toULong(), uLong)
inline operator fun Ptr<ULong>.set(index: ULong, uLong: ULong) = unsafe.set(adr + index * ULong.BYTES.toULong(), uLong.toLong())
inline fun PtrULong(size: Int = 1): Ptr<ULong> = MemoryUtil.nmemCalloc(size.toLong(), ULong.BYTES.toLong()).toPtr<ULong>()
inline fun PtrULong(size: Int = 1, init: (Int) -> ULong): Ptr<ULong> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * ULong.BYTES.toLong()).toPtr<ULong>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrULong(size: Int = 1): Ptr<ULong> = Ptr<ULong>(ncalloc(ULong.BYTES, size, ULong.BYTES))
inline fun MemoryStack.PtrULong(size: Int = 1, init: (Int) -> ULong): Ptr<ULong> {
    val ptr = nmalloc(ULong.BYTES, size * ULong.BYTES).toPtr<ULong>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline infix operator fun Ptr<Float>.get(index: Int): Float = get(index.toULong())
inline infix operator fun Ptr<Float>.get(index: UInt): Float = get(index.toULong())
inline infix operator fun Ptr<Float>.get(index: Long): Float = get(index.toULong())
inline fun Ptr<Float>.get(): Float = get(0uL)
inline infix operator fun Ptr<Float>.get(index: ULong): Float = unsafe.getFloat(adr + index * Float.BYTES.toULong())
inline infix operator fun Ptr<Float>.invoke(index: Int): Float = invoke(index.toULong())
inline infix operator fun Ptr<Float>.invoke(index: UInt): Float = invoke(index.toULong())
inline infix operator fun Ptr<Float>.invoke(index: Long): Float = invoke(index.toULong())
inline operator fun Ptr<Float>.invoke(): Float = get(0uL)
inline infix operator fun Ptr<Float>.invoke(index: ULong): Float = get(index)
@JvmName("plusFloatInt")
inline infix operator fun Ptr<Float>.plus(offset: Int): Ptr<Float> = plus(offset.toULong())
@JvmName("plusFloatUInt")
inline infix operator fun Ptr<Float>.plus(offset: UInt): Ptr<Float> = plus(offset.toULong())
@JvmName("plusFloatLong")
inline infix operator fun Ptr<Float>.plus(offset: Long): Ptr<Float> = plus(offset.toULong())
@JvmName("plusFloatULong")
inline infix operator fun Ptr<Float>.plus(offset: ULong): Ptr<Float> = Ptr(address + offset * Float.BYTES.toULong())
@JvmName("minusFloatInt")
inline infix operator fun Ptr<Float>.minus(offset: Int): Ptr<Float> = minus(offset.toULong())
@JvmName("minusFloatUInt")
inline infix operator fun Ptr<Float>.minus(offset: UInt): Ptr<Float> = minus(offset.toULong())
@JvmName("minusFloatLong")
inline infix operator fun Ptr<Float>.minus(offset: Long): Ptr<Float> = minus(offset.toULong())
@JvmName("minusFloatULong")
inline infix operator fun Ptr<Float>.minus(offset: ULong): Ptr<Float> = Ptr(address - offset * Float.BYTES.toUInt())
@JvmName("incFloat")
inline operator fun Ptr<Float>.inc(): Ptr<Float> = plus(1)
@JvmName("decFloat")
inline operator fun Ptr<Float>.dec(): Ptr<Float> = minus(1)
inline operator fun Ptr<Float>.set(index: Int, float: Float) = set(index.toULong(), float)
inline operator fun Ptr<Float>.set(index: UInt, float: Float) = set(index.toULong(), float)
inline operator fun Ptr<Float>.set(index: Long, float: Float) = set(index.toULong(), float)
inline operator fun Ptr<Float>.set(index: ULong, float: Float) = unsafe.set(adr + index * Float.BYTES.toULong(), float)
inline fun PtrFloat(size: Int = 1): Ptr<Float> = MemoryUtil.nmemCalloc(size.toLong(), Float.BYTES.toLong()).toPtr<Float>()
inline fun PtrFloat(size: Int = 1, init: (Int) -> Float): Ptr<Float> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * Float.BYTES.toLong()).toPtr<Float>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrFloat(size: Int = 1): Ptr<Float> = Ptr<Float>(ncalloc(Float.BYTES, size, Float.BYTES))
inline fun MemoryStack.PtrFloat(size: Int = 1, init: (Int) -> Float): Ptr<Float> {
    val ptr = nmalloc(Float.BYTES, size * Float.BYTES).toPtr<Float>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline infix operator fun Ptr<Double>.get(index: Int): Double = get(index.toULong())
inline infix operator fun Ptr<Double>.get(index: UInt): Double = get(index.toULong())
inline infix operator fun Ptr<Double>.get(index: Long): Double = get(index.toULong())
inline fun Ptr<Double>.get(): Double = get(0uL)
inline infix operator fun Ptr<Double>.get(index: ULong): Double = unsafe.getDouble(adr + index * Double.BYTES.toULong())
inline infix operator fun Ptr<Double>.invoke(index: Int): Double = invoke(index.toULong())
inline infix operator fun Ptr<Double>.invoke(index: UInt): Double = invoke(index.toULong())
inline infix operator fun Ptr<Double>.invoke(index: Long): Double = invoke(index.toULong())
inline operator fun Ptr<Double>.invoke(): Double = get(0uL)
inline infix operator fun Ptr<Double>.invoke(index: ULong): Double = get(index)
@JvmName("plusDoubleInt")
inline infix operator fun Ptr<Double>.plus(offset: Int): Ptr<Double> = plus(offset.toULong())
@JvmName("plusDoubleUInt")
inline infix operator fun Ptr<Double>.plus(offset: UInt): Ptr<Double> = plus(offset.toULong())
@JvmName("plusDoubleLong")
inline infix operator fun Ptr<Double>.plus(offset: Long): Ptr<Double> = plus(offset.toULong())
@JvmName("plusDoubleULong")
inline infix operator fun Ptr<Double>.plus(offset: ULong): Ptr<Double> = Ptr(address + offset * Double.BYTES.toULong())
@JvmName("minusDoubleInt")
inline infix operator fun Ptr<Double>.minus(offset: Int): Ptr<Double> = minus(offset.toULong())
@JvmName("minusDoubleUInt")
inline infix operator fun Ptr<Double>.minus(offset: UInt): Ptr<Double> = minus(offset.toULong())
@JvmName("minusDoubleLong")
inline infix operator fun Ptr<Double>.minus(offset: Long): Ptr<Double> = minus(offset.toULong())
@JvmName("minusDoubleULong")
inline infix operator fun Ptr<Double>.minus(offset: ULong): Ptr<Double> = Ptr(address - offset * Double.BYTES.toUInt())
@JvmName("incDouble")
inline operator fun Ptr<Double>.inc(): Ptr<Double> = plus(1)
@JvmName("decDouble")
inline operator fun Ptr<Double>.dec(): Ptr<Double> = minus(1)
inline operator fun Ptr<Double>.set(index: Int, double: Double) = set(index.toULong(), double)
inline operator fun Ptr<Double>.set(index: UInt, double: Double) = set(index.toULong(), double)
inline operator fun Ptr<Double>.set(index: Long, double: Double) = set(index.toULong(), double)
inline operator fun Ptr<Double>.set(index: ULong, double: Double) = unsafe.set(adr + index * Double.BYTES.toULong(), double)
inline fun PtrDouble(size: Int = 1): Ptr<Double> = MemoryUtil.nmemCalloc(size.toLong(), Double.BYTES.toLong()).toPtr<Double>()
inline fun PtrDouble(size: Int = 1, init: (Int) -> Double): Ptr<Double> {
    val ptr = MemoryUtil.nmemAlloc(size.toLong() * Double.BYTES.toLong()).toPtr<Double>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
inline fun MemoryStack.PtrDouble(size: Int = 1): Ptr<Double> = Ptr<Double>(ncalloc(Double.BYTES, size, Double.BYTES))
inline fun MemoryStack.PtrDouble(size: Int = 1, init: (Int) -> Double): Ptr<Double> {
    val ptr = nmalloc(Double.BYTES, size * Double.BYTES).toPtr<Double>()
    for (i in 0 until size) 
        ptr[i] = init(i)
    return ptr
}
